

import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    Message, FSInputFile, BotCommand,
    ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

BOT_TOKEN = "7986564347:AAGjujddckjP3O0kbWA0o5lAP9d4zm5S3wM"
ADMIN_IDS = {5508167146, 1386843093}
ADMIN_PIN = "0503"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
class UserStates(StatesGroup):
    waiting_support_message = State()
    waiting_cooperation_message = State()
    waiting_faq_message = State()
    waiting_faq_custom_message = State()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∞ ---
class AdminStates(StatesGroup):
    waiting_for_pin = State()
    admin_panel = State()
    waiting_for_broadcast = State()
    waiting_reply_user_id = State()
    waiting_reply_text = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üÜò –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")],
            [KeyboardButton(text="üíº –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ")],
            [KeyboardButton(text="üìñ FAQ")]
        ],
        resize_keyboard=True
    )

def support_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥")]],
        resize_keyboard=True
    )

def admin_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"), KeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞")],
            [KeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"), KeyboardButton(text="–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞")],
            [KeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")]
        ],
        resize_keyboard=True
    )

def get_avatar():
    path = os.path.join("media", "avatar.jpg")
    if os.path.exists(path):
        return FSInputFile(path)
    return None

async def set_main_menu():
    commands = [
        BotCommand(command="help", description="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
        BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å"),
        BotCommand(command="admin", description="üîê –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∏–Ω)")
    ]
    await bot.set_my_commands(commands)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    avatar = get_avatar()
    text = (
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –≠—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ <b><a href='https://t.me/Waltrosbet'>Waltros</a></b>.\n\n"
        "–ß—Ç–æ–± –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π¬ª</b>.\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ–µ–∫—Ç—É, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É <b>FAQ</b>.\n\n"
        "‚è≥ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º 24/7!"
    )
    if avatar:
        await message.answer_photo(photo=avatar, caption=text, reply_markup=get_main_keyboard())
    else:
        await message.answer(text, reply_markup=get_main_keyboard())

@dp.message(lambda m: m.text == "üÜò –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
async def contact_support(message: Message, state: FSMContext):
    await state.set_state(UserStates.waiting_support_message)
    await message.answer(
        "‚úÖ –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É.\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –Ω–∞–∂–º–∏—Ç–µ ¬´üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥¬ª.",
        reply_markup=support_keyboard()
    )

@dp.message(UserStates.waiting_support_message)
async def handle_support_message(message: Message, state: FSMContext):
    if message.text == "üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        await state.clear()
        await message.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        return

    text_to_admin = (
        f"üì© <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:</b>\n"
        f"üë§ –ò–º—è: {message.from_user.full_name}\n"
        f"üÜî ID: {message.from_user.id}\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}"
    )
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, text_to_admin)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∞–º {admin_id}: {e}")

    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")

@dp.message(lambda m: m.text == "üíº –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ")
async def cooperation(message: Message, state: FSMContext):
    await state.set_state(UserStates.waiting_cooperation_message)
    await message.answer(
        "üíº –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é.\n¬´üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥¬ª ‚Äî –≤—ã–π—Ç–∏.",
        reply_markup=support_keyboard()
    )

@dp.message(UserStates.waiting_cooperation_message)
async def handle_cooperation_message(message: Message, state: FSMContext):
    if message.text == "üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        await state.clear()
        await message.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        return

    text_to_admin = (
        f"üì© <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É:</b>\n"
        f"üë§ –ò–º—è: {message.from_user.full_name}\n"
        f"üÜî ID: {message.from_user.id}\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}"
    )
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, text_to_admin)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∞–º {admin_id}: {e}")

    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")

@dp.message(lambda m: m.text == "üìñ FAQ")
async def faq(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé≤ –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å—Ç–∞–≤–∫–æ–π?")],
            [KeyboardButton(text="üíµ –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã–ø–ª–∞—Ç–æ–π?")],
            [KeyboardButton(text="üïπ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å?")],
            [KeyboardButton(text="üõ° –ß–µ—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞?")],
            [KeyboardButton(text="‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å FAQ")],
            [KeyboardButton(text="üîö –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("FAQ ‚Äî –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", reply_markup=keyboard)

@dp.message(lambda m: m.text in ["üé≤ –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å—Ç–∞–≤–∫–æ–π?", "üíµ –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã–ø–ª–∞—Ç–æ–π?", "üïπ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å?", "üõ° –ß–µ—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞?"])
async def faq_preset_answers(message: Message):
    answers = {
        "üé≤ –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å—Ç–∞–≤–∫–æ–π?": "–û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π —Å—Ç–∞–≤–∫–∏ –∏ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ. –ú—ã –ø–æ–º–æ–∂–µ–º.",
        "üíµ –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã–ø–ª–∞—Ç–æ–π?": "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É, —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞ –∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞—è–≤–∫–∏.",
        "üïπ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å?": "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –≤ —Ä–∞–∑–¥–µ–ª–µ Waltros –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.",
        "üõ° –ß–µ—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞?": "–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á–µ—Å—Ç–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏–≥—Ä—ã.",
    }
    await message.answer(answers[message.text])
    await message.answer(
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥¬ª –¥–ª—è –≤—ã—Ö–æ–¥–∞.",
        reply_markup=support_keyboard()
    )
    await UserStates.waiting_faq_custom_message.set()

@dp.message(UserStates.waiting_faq_custom_message)
async def handle_faq_custom_message(message: Message, state: FSMContext):
    if message.text == "üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        await state.clear()
        await cmd_start(message, state)
        return

    text_to_admin = (
        f"üì© <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ FAQ:</b>\n"
        f"üë§ –ò–º—è: {message.from_user.full_name}\n"
        f"üÜî ID: {message.from_user.id}\n"
        f"üìù –í–æ–ø—Ä–æ—Å:\n{message.text}"
    )
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, text_to_admin)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∞–º {admin_id}: {e}")

    await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")

@dp.message(lambda m: m.text == "‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å FAQ")
async def contact_faq(message: Message, state: FSMContext):
    await state.set_state(UserStates.waiting_faq_message)
    await message.answer(
        "‚úÖ –°–≤—è–∑—å —Å FAQ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.\n¬´üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥¬ª ‚Äî –≤—ã–π—Ç–∏.",
        reply_markup=support_keyboard()
    )

@dp.message(UserStates.waiting_faq_message)
async def handle_faq_message(message: Message, state: FSMContext):
    if message.text == "üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        await state.clear()
        await cmd_start(message, state)
        return

    text_to_admin = (
        f"üì© <b>–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ FAQ:</b>\n"
        f"üë§ –ò–º—è: {message.from_user.full_name}\n"
        f"üÜî ID: {message.from_user.id}\n"
        f"üìù –í–æ–ø—Ä–æ—Å:\n{message.text}"
    )
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, text_to_admin)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∞–º {admin_id}: {e}")

    await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")

@dp.message(lambda m: m.text in ["üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥", "üîö –ù–∞–∑–∞–¥"])
async def back_to_main(message: Message, state: FSMContext):
    await state.clear()
    await cmd_start(message, state)

# --- –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ---

@dp.message(Command("admin"))
async def admin_command(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        return
    await state.set_state(AdminStates.waiting_for_pin)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∏–Ω-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:")

@dp.message(AdminStates.waiting_for_pin)
async def check_pin(message: Message, state: FSMContext):
    if message.text == ADMIN_PIN:
        await state.set_state(AdminStates.admin_panel)
        avatar = get_avatar()
        await message.answer("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!", reply_markup=admin_keyboard())
        if avatar:
            await message.answer_photo(photo=avatar, caption="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å Waltros")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∏–Ω-–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@dp.message(AdminStates.admin_panel)
async def admin_panel_handler(message: Message, state: FSMContext):
    text = message.text.lower()

    if text == "–≤—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        await state.clear()
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.", reply_markup=get_main_keyboard())

    elif text == "—Ä–∞—Å—Å—ã–ª–∫–∞":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º:")
        await state.set_state(AdminStates.waiting_for_broadcast)

    elif text == "–æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å:")
        await state.set_state(AdminStates.waiting_reply_user_id)

    elif text == "–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞":
        await message.answer("–§—É–Ω–∫—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

    elif text == "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ":
        await message.answer("–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã.")

    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞.", reply_markup=admin_keyboard())

@dp.message(AdminStates.waiting_for_broadcast)
async def admin_broadcast(message: Message, state: FSMContext):
    text_to_send = message.text
    await message.answer("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    errors = 0
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∞:\n\n{text_to_send}")
        except Exception as e:
            errors += 1
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—à–∏–±–æ–∫: {errors}")
    await state.set_state(AdminStates.admin_panel)

@dp.message(AdminStates.waiting_reply_user_id)
async def admin_waiting_reply_user_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(reply_user_id=user_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
        await state.set_state(AdminStates.waiting_reply_text)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–Ω–æ–≤–æ:")

@dp.message(AdminStates.waiting_reply_text)
async def admin_waiting_reply_text(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("reply_user_id")
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await state.set_state(AdminStates.admin_panel)
        return

    try:
        await bot.send_message(user_id, f"üì© –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message.text}")
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    await state.set_state(AdminStates.admin_panel)

# --- –ó–∞–ø—É—Å–∫ ---

async def main():
    await set_main_menu()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())